# bot/main.py
import os
import requests
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters

load_dotenv()
TOKEN = os.getenv("TELEGRAM_TOKEN")

START_TEXT = (
    "üìü <b>CarFact</b> ‚Äî ’Ω’ø’∏÷Ç’£’´÷Ä ÷Ñ’∏ ’°’æ’ø’∏’¥’•÷Ñ’•’∂’°’µ’´ ’ª’∏’≤’∏’æ’∏÷Ç’©’µ’°’∂ ’∫’°’ø’¥’∏÷Ç’©’µ’∏÷Ç’∂’® ’®’∂’§ VIN-’´÷Ñ÷Ä’∏’æ’∏÷Ä’§÷Ü\n"
    "üöó ‘ª’¥’°÷Å’´÷Ä’©’´÷Ä’Ø÷Ä’∏’æ’∏÷Ä’§÷Ü\n"
    "‚Ä¢ ÷Ñ’°’∂’´ <b>’Ω’∫’°’Ω’°÷Ä’∏’¢’°’Æ’•÷Ä</b> ’ß ’∏÷Ç’∂’•÷Å’•’¨ ’¥’•÷Ñ’•’∂’°’∂\n"
    "‚Ä¢ ’•’≤’•’¨ ’•’∂ ’°÷Ä’§’µ’∏÷Ñ <b>’æ’π’°÷Ä’∂’•÷Ä</b>\n"
    "‚Ä¢ ÷Ñ’°’∂’´ <b>’Ø’´’¨’∏’¥’•’ø÷Ä</b> ’ß ’°’∂÷Å’•’¨ ’æ÷Ä’°’∫÷Ä’°’Ø’°’∂’∏÷Ç’¥\n"
    "‚Ä¢ ’∏÷Ä’æ ’∏÷Ç ÷á ’•÷Ä’¢ ’ß <b>’∂’•÷Ä’¥’∏÷Ç’Æ’æ’•’¨</b>\n\n"
    "’ç’•’≤’¥’´÷Ä ' üîç ’ç’ø’∏÷Ç’£’•’¨ VIN'’ù÷à ’Ω’ø’∏÷Ç’£’∏÷Ç’¥’® ’Ω’Ø’Ω’•’¨’∏÷Ç ’∞’°’¥’°÷Ä’°÷Ä’´’∂÷Ñ÷â"
)

keyboard = ReplyKeyboardMarkup([["üîç ’ç’ø’∏÷Ç’£’•’¨ VIN"]], resize_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_html(START_TEXT, reply_markup=keyboard)

async def handle_vin_prompt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üì• ‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ’∏÷Ç’≤’°÷Ä’Ø’•’¨ ’°’æ’ø’∏’¥’•÷Ñ’•’∂’°’µ’´ VIN ’Ø’∏’§’® (17 ’∂’´’∑):")

async def handle_vin_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    vin = update.message.text.strip().upper()

    if len(vin) == 17 and vin.isalnum():
        await update.message.reply_text(f"üîé ’ç’ø’∏÷Ç’£’∏÷Ç’¥ ’•’¥ VIN: {vin} ...")

        try:
            response = requests.post(
                "https://carfact.onrender.com/check-vin",
                json={
                    "vin": vin,
                    "user_id": str(update.effective_user.id)
                },
                timeout=10
            )
            data = response.json()

            if data["status"] == "ok":
                r = data["report"]
                message = (
                    f"üìÑ <b>‘±’æ’ø’∏’¥’•÷Ñ’•’∂’°’µ’´ ’ø’æ’µ’°’¨’∂’•÷Ä</b> ({r['vin']})\n\n"
                    f"üè∑Ô∏è ‘±÷Ä’ø’°’§÷Ä’∏’≤: {r.get('make')}\n"
                    f"üöò ’Ñ’∏’§’•’¨: {r.get('model')}\n"
                    f"üìÜ ’è’°÷Ä’´’∂: {r.get('year')}\n"
                    f"üöó ’è’•’Ω’°’Ø: {r.get('vehicle_type')}\n"
                    f"üè≠ ‘≥’∏÷Ä’Æ’°÷Ä’°’∂: {r.get('plant_country')}\n"
                    f"üöô ’Ñ’°÷Ä’¥’∂’´ ’ø’´’∫’®: {r.get('body_class')}"
                )
                await update.message.reply_html(message)
            else:
                await update.message.reply_text("‚ö†Ô∏è ’â’∞’°’ª’∏’≤’æ’•÷Å ’Ω’ø’°’∂’°’¨ ’ø’æ’µ’°’¨’∂’•÷Ä÷â")

        except Exception as e:
            await update.message.reply_text("‚ö†Ô∏è ’ç’•÷Ä’æ’•÷Ä’´ ’Ω’≠’°’¨ ’Ø’°’¥ ’Ø’°’∫’´ ’≠’∂’§’´÷Ä÷â")
            print(f"[ERROR] {e}")
    else:
        await update.message.reply_text("‚ö†Ô∏è ’ç’≠’°’¨ VIN÷â ‘±’µ’∂ ’∫’•’ø÷Ñ ’ß ’¨’´’∂’´ 17 ’∂’´’∑ ÷á ’¢’°’≤’Ø’°÷Å’°’Æ ’¨’´’∂’´ ’¥’´’°’µ’∂ ’ø’°’º’•÷Ä’´÷Å ÷á ’©’æ’•÷Ä’´÷Å÷â")

async def handle_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    try:
        response = requests.get(f"https://carfact.onrender.com/history/{user_id}", timeout=10)
        data = response.json()

        if not data["history"]:
            await update.message.reply_text("‚ùó‘¥’∏÷Ç÷Ñ ’§’•’º ’π’•÷Ñ ’´÷Ä’°’Ø’°’∂’°÷Å÷Ä’•’¨ VIN ’Ω’ø’∏÷Ç’£’∏÷Ç’¥÷â")
            return

        text = "<b>üìú ’Å’•÷Ä ’æ’•÷Ä’ª’´’∂ VIN ’Ω’ø’∏÷Ç’£’∏÷Ç’¥’∂’•÷Ä’®</b>:\n\n"
        for i, item in enumerate(data["history"], 1):
            r = item["report"]
            text += f"{i}. {r['vin']} ‚Äî {r.get('model')}, {r.get('year')}\n"

        await update.message.reply_html(text)

    except Exception as e:
        print("‚ùå History error:", e)
        await update.message.reply_text("‚ö†Ô∏è ’â’∞’°’ª’∏’≤’æ’•÷Å ’¢’•÷Ä’•’¨ ’∫’°’ø’¥’∏÷Ç’©’µ’∏÷Ç’∂’®÷â")

async def buy(update, context):
    quantity = int(context.args[0]) if context.args else 1
    if quantity not in [1, 3]:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 1 –∏–ª–∏ 3 (–Ω–∞–ø—Ä–∏–º–µ—Ä, /buy 3)")
        return

    payment_url = create_vin_payment(quantity)
    await update.message.reply_text(f"–û–ø–ª–∞—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É –∑–¥–µ—Å—å: {payment_url}")

if __name__ == '__main__':
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("buy", buy))
    app.add_handler(CommandHandler("history", handle_history))
    app.add_handler(MessageHandler(filters.Regex("^üîç ’à÷Ç’∂’•’¥ VIN$"), handle_vin_prompt))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_vin_input))

    print("ü§ñ CarFact ’¢’∏’ø’® ’°’∑’≠’°’ø’∏÷Ç’¥ ’ß...")
    app.run_polling()

# from aiogram import Bot, Dispatcher, types
# from aiogram.utils import executor
# import logging
# import requests
# import os
# from dotenv import load_dotenv
#
# load_dotenv()
#
# TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
# API_BASE_URL = os.getenv("API_BASE_URL", "https://carfact.onrender.com")  # –∏–ª–∏ http://localhost:8000
#
# bot = Bot(token=TELEGRAM_TOKEN)
# dp = Dispatcher(bot)
#
# logging.basicConfig(level=logging.INFO)
#
# @dp.message_handler(commands=["start"])
# async def start_command(message: types.Message):
#     await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –û—Ç–ø—Ä–∞–≤—å—Ç–µ /buy —á—Ç–æ–±—ã –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ VIN-–æ—Ç—á—ë—Ç.")
#
# @dp.message_handler(commands=["buy"])
# async def buy_handler(message: types.Message):
#     keyboard = types.InlineKeyboardMarkup()
#     keyboard.add(
#         types.InlineKeyboardButton(text="1 VIN ‚Äî $2.99", callback_data="buy:single"),
#         types.InlineKeyboardButton(text="3 VIN ‚Äî $5.99", callback_data="buy:bundle3"),
#     )
#     await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:", reply_markup=keyboard)
#
# @dp.callback_query_handler(lambda c: c.data.startswith("buy:"))
# async def process_buy_callback(callback_query: types.CallbackQuery):
#     plan = callback_query.data.split(":")[1]
#     vin = "ABC1234567890XYZ"  # –º–æ–∂–µ—à—å –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏–ª–∏ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#     telegram_id = callback_query.from_user.id
#
#     try:
#         res = requests.post(f"{API_BASE_URL}/create-checkout-session", json={
#             "vin": vin,
#             "telegram_id": telegram_id,
#             "plan": plan
#         })
#         res.raise_for_status()
#         data = res.json()
#         await bot.send_message(telegram_id, f"üí≥ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n{data['url']}")
#     except Exception as e:
#         await bot.send_message(telegram_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Å—Å–∏–∏ –æ–ø–ª–∞—Ç—ã: {e}")
#
# if __name__ == "__main__":
#     executor.start_polling(dp, skip_updates=True)
